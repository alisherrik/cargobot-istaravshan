import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# Konstantalar
ADMIN_ID = 1042437313  # Adminning Telegram user ID si
BOT_TOKEN = '8252580479:AAH7KG7hYPSB2osGUHtN3PEVY7aA5n3ajrU'  # Token ni o'zgartiring
API_URL = "https://toocars.tj/api/trackcode"  # API endpoint-i (o'zingizni API manzilingizni kiriting)

# Buttonlar ro'yxatini yaratish
def get_custom_keyboard():
    custom_keyboard = [
        ["–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫ –∫–æ–¥"],  # Trek kodni qidirishf
        ["–ù–∞—Ä—Ö–Ω–æ–º–∞::"],       # Narxnomani ko'rsatish
        ["–ê–ª–æ–∫–∞ –±–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"],
        ["–ê–¥—Ä–µ—Å–∏ –∫–∞—Ä–≥–æ!!"],
        ["–ú–æ–ª“≥–æ–∏ –º–∞—ä–Ω—à—É–¥–∞!!"]
    ]
    return ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)

# /start buyrug'i
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°–∞–ª–æ–º! –ú–∞–Ω –±–æ—Ç–∏ “∑—É—Å—Ç—É“∑”Ø–∏ –∫–æ–¥“≥–æ–∏ —Ç—Ä–µ–∫ “≥–∞—Å—Ç–∞–º.", reply_markup=get_custom_keyboard())


async def send_address_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Statik fayldagi rasm manzili
    image_path = os.path.join(os.getcwd(), "statics", "cargo_address_image.jpg")

    try:
        # Rasmni lokal fayldan jo'natish
        with open(image_path, "rb") as photo:
            await update.message.reply_photo(
    photo=photo,
    caption="üè¢ –ú–∞–Ω–∑–∏–ª–∏ –∫–∞—Ä–≥–æ: Istaravshan cargo:\n"
            "```text\n"
            "Istaravshan cargo\n 15157940200\n ÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏Ç\n  Á¶èÁî∞Ë°óÈÅìÂÖ¥Ê∏ØÂ∞èÂå∫ 77Âπ¢2ÂçïÂÖÉ1Ê•ºÂ∫ìÊàø Istaravshan –ù–æ–º –≤–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "```",
    parse_mode="MarkdownV2"
)
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error in sending photo: {str(e)}")

# Trek kod qidirish
async def search_track(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    track_code = update.message.text.strip()

    try:
        # API ga POST so'rov yuborish
        payload = {"trackcode": track_code}
        headers = {"Content-Type": "application/json"}
        response = requests.post(API_URL, json=payload, headers=headers)
        data = response.json()

        if response.status_code == 200 and "message" in data:
            # Agar javob muvaffaqiyatli bo'lsa
            message = data["message"]
            await update.message.reply_text(f"‚úÖ {message}")
        else:
            # Agar kod topilmagan bo'lsa
            await update.message.reply_text(f"üîç –ë–∞—Ä–æ–∏ —à—É–º–æ –±–æ –∫–æ–¥ —Ç—Ä–µ–∫: ({track_code}) –±–æ—Ä –¥–∞—Ä –∞–Ω–±–æ—Ä–∏ –º–æ –Ω–∞–º–µ—ë–±–∞–¥!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –•–∞—Ç–æ —Ä—É—Ö –¥–æ–¥: {str(e)}")

# Narxnomani ko'rsatish
async def show_pricing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    pricing_info = """
–ù–∞—Ä—Ö–Ω–æ–º–∞–∏ –º–æ ‚§µÔ∏è‚§µÔ∏è‚§µÔ∏è
“ö–∞–±—É–ª–∏ –±–æ—Ä“≥–æ –∞–∑ 0.5–∫–≥ “≥–∏—Å–æ–± –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥.
–ê–∑ 0.1‚Äì0.5 –∫–≥ ‚Üí 1.5$
–ê–∑ 0.51‚Äì1 –∫–≥ ‚Üí 3$
1 –∫—É–± ‚Üí 300$ “≥–∏—Å–æ–± –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥
"""
    await update.message.reply_text(pricing_info)

# Tugma bosilganda harakat
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫ –∫–æ–¥":
        # Qidiruv rejimiga o'tkazamiz
        context.user_data['search_mode'] = True
        await update.message.reply_text("üîç –õ—É—Ç—Ñ–∞–Ω, –∫–æ–¥ —Ç—Ä–µ–∫—Ä–æ –≤–æ—Ä–∏–¥ –Ω–∞–º–æ–µ–¥:")
    elif text == "–ù–∞—Ä—Ö–Ω–æ–º–∞::":
        context.user_data['search_mode'] = False
        await show_pricing(update, context)
    elif text == "–ê–ª–æ–∫–∞ –±–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        context.user_data['search_mode'] = False
        await update.message.reply_text("üìû –ë–∞—Ä–æ–∏ —Ç–∞–º–æ—Å: WhatsApp 985639009, 945553322, @istaravshan_cargo_official, ")
    elif text == "–ê–¥—Ä–µ—Å–∏ –∫–∞—Ä–≥–æ!!":
        context.user_data['search_mode'] = False
        await send_address_image(update,context)
    elif text == "–ú–æ–ª“≥–æ–∏ –º–∞—ä–Ω—à—É–¥–∞!!":
        context.user_data['search_mode'] = False
        await update.message.reply_text("""
–ö–ê–†–ì–û–ò –ú–û –ò–ù –ù–ê–ú–£–î–ò –ë–û–†–•–û–†–û –ö–ê–ë–£–õ –ù–ê–ú–ï–ö–£–ù–ê–î!

‚Ä¢ –ê—à—ë“≥–æ–∏ —à–∏—à–∞–≥”£
‚Ä¢ –Ø—Ä–æ“õ –≤–∞ –∞—à—ë“≥–æ–∏ “≥–∞—Ä–±”£
‚Ä¢ –ú–∞–≤–æ–¥“≥–æ–∏ —Ö–∞—Ç–∞—Ä–Ω–æ–∫
‚Ä¢ –ú–∞–≤–æ–¥“≥–æ–∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫”£ –≤–∞ –ø—Å–∏—Ö–æ—Ç—Ä–æ–ø”£
‚Ä¢ “≤–∞–π–≤–æ–Ω–æ—Ç –≤–∞ —Ä–∞—Å—Ç–∞–Ω–∏“≥–æ
‚Ä¢ –ú–∞–≤–æ–¥“≥–æ–∏ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ”£
‚Ä¢ –ú–∞“≥—Å—É–ª–æ—Ç“≥–æ–∏ —Ö”Ø—Ä–æ–∫–∞ –≤–∞ —Ç–∏–±–±”£
‚Ä¢ –ü—É–ª –≤–∞ “≥—É“∑“∑–∞—Ç“≥–æ–∏ “õ–∞–ª–±–∞–∫”£
""")
    else:
        await search_track(update, context)

# Botni ishga tushirish
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_press))

    print("–ë–æ—Ç —à—É—Ä”Ø—ä —à—É–¥...")
    port = int(os.getenv("PORT", 8443))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"https://cargobot.onrender.com/{BOT_TOKEN}"
    )